---
import Sidebar from "../components/layout/Sidebar.astro";
import Layout from "../layouts/Layout.astro";
import "../styles/global.css"; // Ensure global styles are imported

const title = "Invertir";

// Remove React imports and hooks; use a simple HTML form with no client-side interactivity.
// You can handle the form submission on the server or add a client:load/client:only React component if interactivity is needed.
---

<Layout title={title}>
  <div
    class="flex flex-col min-h-screen bg-gradient-to-br from-gray-100 via-gray-200 to-gray-300 dark:from-gray-900 dark:via-gray-800 dark:to-gray-700 md:flex-row"
  >
    <div class="w-full md:w-64 flex-shrink-0">
      <Sidebar />
    </div>
    <main class="flex-1 px-2 sm:px-6 py-4 flex items-center justify-center">
      <div class="w-full max-w-md">
        <div class="bg-white dark:bg-gray-900 rounded-xl shadow-lg p-6 sm:p-8">
          <h1
            class="text-2xl sm:text-3xl font-bold mb-6 text-gray-800 dark:text-gray-100 text-center"
          >
            Invertir
          </h1>
          <form id="invest-form" class="flex flex-col gap-4">
            <label
              for="amount"
              class="block text-sm font-medium text-gray-700 dark:text-gray-200"
            >
              Monto a invertir:
            </label>
            <input
              type="number"
              id="amount"
              name="amount"
              min="1"
              step="any"
              required
              class="mt-1 block w-full rounded-lg border-2 border-gray-300 dark:border-gray-700 shadow-md focus:border-blue-500 focus:ring-2 focus:ring-blue-400 dark:bg-gray-800 dark:text-gray-100 transition-all duration-200 px-4 py-2 placeholder-gray-400 dark:placeholder-gray-500"
              placeholder="Ej: 1000"
            />
            <button
              type="submit"
              class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Invertir
            </button>
          </form>
        </div>
      </div>
    </main>
  </div>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("invest-form");
      if (form) {
        form.addEventListener("submit", function (e) {
          e.preventDefault();
          handleInvestmentSubmit(form as HTMLFormElement);
        });

        async function handleInvestmentSubmit(form: HTMLFormElement) {
          const amount =
            (
              (form as HTMLFormElement).elements.namedItem(
                "amount"
              ) as HTMLInputElement
            )?.value || "";
          if (!amount) {
            alert("Por favor, ingresa un monto válido.");
            return;
          } else {
            // Obtener el nombre del usuario desde localStorage
            const registeredUser = localStorage.getItem("registeredUser");
            let user = "";
            if (registeredUser) {
              try {
                const parsed = JSON.parse(registeredUser);
                user = parsed.name || "";
              } catch {
                user = "";
              }
            }
            if (!user) {
              alert(
                "No se encontró un usuario registrado. Por favor, regístrate primero."
              );
              return;
            }

            // Generar un ID único simple
            const id = "tx" + Date.now();

            // Obtener el precio actual de ETH en USD y calcular el total
            let price_usd = 0;
            try {
              const res = await fetch(
                "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
              );
              const data = await res.json();
              const ethPrice = data?.ethereum?.usd || 0;
              price_usd = Number(amount) * ethPrice;
            } catch {
              price_usd = 0;
            }

            // Crear el objeto de inversión
            const investment = {
              id,
              type: "compra",
              asset: "CluckinCoin",
              amount: Number(amount),
              price_usd,
              timestamp: new Date().toISOString(),
              from: "user_wallet",
              to: "external_wallet",
              user,
              status: "confirmada",
            };

            // Guardar en localStorage
            const key = "investments";
            let investments = [];
            const stored = localStorage.getItem(key);
            if (stored) {
              try {
                investments = JSON.parse(stored);
                if (!Array.isArray(investments)) investments = [];
              } catch {
                investments = [];
              }
            }
            investments.push(investment);
            localStorage.setItem(key, JSON.stringify(investments));

            alert(`¡Inversión de ${amount} registrada para ${user}!`);
            window.location.href = "/TSI-Group/orders";
          }
          (form as HTMLFormElement).reset();
        }
      }
    });
  </script>
</Layout>
